{"version":3,"sources":["components/layout/layout.module.css","api/firebase.js","store/conversations/types.js","store/conversations/reducer.js","store/conversations/actions.js","store/conversations/thunk.js","store/messages/types.js","store/messages/reducer.js","store/messages/actions.js","store/messages/thunks.js","components/message-list/message/message.js","components/message-list/message-list.js","components/chat-list/chat/chat.js","components/chat-list/chat-list.js","components/theme-context/index.js","components/layout/layout.js","components/header/header.js","store/profile/types.js","store/profile/reducer.js","components/profileForm/profileForm.js","store/profile/actions.js","components/auth-form/auth-form.js","components/auth-template/auth-template.js","components/route/route.js","pages/chat.js","pages/welcome.js","pages/404.js","pages/profile.js","store/gists/types.js","store/gists/reducer.js","store/gists/actions.js","store/gists/thunks.js","pages/gist.js","store/animegists/types.js","store/animegists/reducer.js","store/animegists/actions.js","store/animegists/thunks.js","pages/animegists.js","pages/login.js","pages/sign-up.js","api/request.js","api/logger.js","store/index.js","store/middlewares/report.js","api/gists.js","api/messages.js","api/conversations.js","store/middlewares/logger.js","store/middlewares/bot-message.js","store/middlewares/timeout-scheduler.js","index.js","pages/page.module.css","components/profileForm/profileForm.module.css","components/chat-list/chatList.module.css","components/message-list/messageList.module.css","components/header/header.module.css","profile.module.css"],"names":["module","exports","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","database","HANDLE_CHANGE_MESSAGE_VALUE_START","HANDLE_CHANGE_MESSAGE_VALUE_SUCCESS","HANDLE_CHANGE_MESSAGE_VALUE_ERROR","CLEAR_MESSAGE_VALUE","ADD_ROOM_START","ADD_ROOM_SUCCESS","ADD_ROOM_ERROR","DELETE_ROOM","EDIT_NAME_ROOM","GET_CONVERSATIONS_START","GET_CONVERSATIONS_SUCCESS","GET_CONVERSATIONS_ERROR","initialState","conversations","conversationsPending","conversationsError","handleChangeMessageValueSuccess","value","roomId","type","payload","clearMessageValue","editNameRoom","oldTitleId","newTitle","getConversationsFB","dispatch","_","getConversationsApi","then","snapshot","forEach","push","val","getConversationsSuccess","catch","e","console","log","cb","debounce","handleChangeMessage","a","SEND_MESSAGE_START","SEND_MESSAGE_SUCCESS","SEND_MESSAGE_ERROR","EDIT_MESSAGE","GET_MESSAGES_START","GET_MESSAGES_SUCCESS","GET_MESSAGES_ERROR","messages","messagesPending","messagesError","sendMessageSuccess","message","meta","delay","getMessagesFB","getMessagesApi","snap","key","Object","values","getMessagesSuccess","Message","id","author","date","useDispatch","useParams","editMessageValue","newValue","prompt","oldMessageId","newMessage","editMessage","className","classNames","stylesMessages","blockMessage","blockMessageBot","iconEdit","onClick","textMessage","userName","CssTextField","withStyles","root","color","borderBottomColor","borderColor","border","backgroundColor","opacity","TextField","MessageList","sendMessageFromBot","useSelector","state","ref","useRef","refBlock","messagesArr","find","conversation","title","handleSendMessage","sendMessagesApi","res","error","sendMessageWithThunk","useEffect","current","focus","scrollHeight","window","scrollTo","clearTimeout","timerID","chat","style","overflow","scroll","map","inputRef","onChange","event","messageValue","handleChangeMessageApi","handleChangeMessageValueFB","target","autoFocus","label","text","variant","fullWidth","onKeyPress","code","InputProps","endAdornment","InputAdornment","stylesChats","spinner","role","Send","cursor","Chat","selected","lastMessage","length","listItemLink","to","ListItem","button","iconDelete","ListItemText","chatName","primary","listItem","useStyles","makeStyles","width","maxWidth","ChatList","classes","List","component","index","currentMessages","btn","addConversationApi","ThemeContext","createContext","DefaultThemeProvider","children","themes","initialTheme","useState","theme","name","setTheme","changeTheme","useCallback","Provider","ThemeProvider","Layout","chats","Consumer","Grid","container","styles","app","item","xs","chatList","minWidth","messageList","Header","session","email","setEmail","pending","setPending","setError","signOut","auth","useContext","user","profile","stylesHeader","header","href","textDecoration","margin","btnToCab","firstName","soName","TOGGLE_NAME_VISIBLE","EDIT_DATA","SAVE","EDIT_USER","nameVisible","age","birthDay","edit","ProfileForm","form","initialValue","setValue","useFormInput","htmlFor","input","defaultValue","disabled","btnEditSave","data","padding","fontSize","fontWeight","marginBottom","textAlign","LoginForm","submitButton","onSubmit","password","setPassword","handleSubmit","Input","placeholder","Button","link","display","justifyContent","marginTop","AuthTemplate","PrivateRoute","isAut","rest","PublicRoute","useHistory","listenExistChat","document","addEventListener","removeEventListener","exact","path","title1","title2","title3","stylesPage","img","src","process","Welcome","pageWelcome","welcomeText","welcomeBtn","Error404","Profile","pageProfile","profileLogo","profileTitle","profileBtn","btnToChat","GET_GISTS_START","GET_GISTS_SUCCESS","GET_GISTS_ERROR","SEARCH_GISTS_START","SEARCH_GISTS_SUCCESS","SEARCH_GISTS_ERROR","gists","gistsPending","gistsError","gistsSuccess","gistsStart","getGists","page","api","getGistsApi","Gist","search","setSearch","searchGistDebounced","useMemo","query","isCurrentQuery","searchGistsByUserNameApi","searchGistsByUserName","Array","from","btnQuery","gistsBlock","gist","description","GET_GISTS_ANIME_START","GET_GISTS_ANIME_SUCCESS","GET_GISTS_ANIME_ERROR","gistsAnimeSuccess","gistsAnimeStart","gistsAnimeError","API_URL_PUBLIC","fetch","response","json","result","Anime","anime","character","signInWithEmailAndPassword","Login","createUserWithEmailAndPassword","SignUp","request","token","requestWithToken","headers","get","url","withAuth","config","post","params","this","axios","interceptors","use","withLogger","create","baseURL","persistConfig","storage","blacklist","whitelist","reducer","combineReducers","action","nanoid","filter","Date","toLocaleTimeString","persistreducer","persistReducer","store","createStore","compose","applyMiddleware","next","thunk","withExtraArgument","child","update","set","getState","setTimeout","timeoutId","clearInterval","__REDUX_DEVTOOLS_EXTENSION__","f","persistore","persistStore","мятная","createTheme","синяя","черная","App","setSession","onAuthStateChanged","StrictMode","loading","persistor","basename","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c5b13e65.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"layout_app__26Bxy\",\"header\":\"layout_header__nBV4b\",\"headerTitle\":\"layout_headerTitle__STGgR\",\"message\":\"layout_message__uyW6r\",\"buttonMessage\":\"layout_buttonMessage__1igWz\"};","\r\n//конфиг, который мы получили на сайте firebase\r\nimport firebase from \"firebase/compat\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCishWgMKqs8cs0D_kgmB2GN9GaAi_TMzk\",\r\n    authDomain: \"gb-chatmy.firebaseapp.com\",\r\n    databaseURL: \"https://gb-chatmy-default-rtdb.europe-west1.firebasedatabase.app\",\r\n    projectId: \"gb-chatmy\",\r\n    storageBucket: \"gb-chatmy.appspot.com\",\r\n    messagingSenderId: \"241893539443\",\r\n    appId: \"1:241893539443:web:59c95375ff81cb205fb406\",\r\n    measurementId: \"G-BJEFE7G8GR\"\r\n};\r\n\r\nexport const firebaseApp = firebase.initializeApp(firebaseConfig)//теперь везде, где нам нужен firebase, мы будем его использовать отсюда.\r\n\r\nexport const db = firebaseApp.database()//это наша база данных, с которой мы и будем работать","//здесь описываются все типы\r\n//@counter - это означает, что мы находимся в фиче counter\r\n//чтобы когда мы будем дебаггеры смотреть, чтобы легче было ориентироваться\r\n\r\n//изменение значения инпута\r\nexport const HANDLE_CHANGE_MESSAGE_VALUE_START = \"@conversations/start handle change value\";\r\nexport const HANDLE_CHANGE_MESSAGE_VALUE_SUCCESS = \"@conversations/success handle change value\";\r\nexport const HANDLE_CHANGE_MESSAGE_VALUE_ERROR = \"@conversations/error handle change value\";\r\n\r\n//очистка значения инпута после отправки сообщения\r\nexport const CLEAR_MESSAGE_VALUE = \"@conversations/clear message value\";\r\n\r\n//добавление новой комнаты\r\n// export const ADD_ROOM = \"@conversations/add room\";\r\n\r\nexport const ADD_ROOM_START = \"@conversations/start add room\";\r\nexport const ADD_ROOM_SUCCESS = \"@conversations/success add room\";\r\nexport const ADD_ROOM_ERROR = \"@conversations/error add room\";\r\n\r\n\r\n\r\nexport const DELETE_ROOM = \"@conversations/delete room\"\r\n\r\nexport const EDIT_NAME_ROOM = \"@conversations/edit name room\";\r\n\r\n//получение бесед с сервера\r\nexport const GET_CONVERSATIONS_START = \"@gists/start get conversation from fb\"; //старт запроса\r\nexport const GET_CONVERSATIONS_SUCCESS = \"@gists/success get conversation from fb\"; //финиш запроса\r\nexport const GET_CONVERSATIONS_ERROR = \"@gists/error get conversation from fb\"; //ошибка запроса","import { nanoid } from \"nanoid\";\r\nimport {\r\n  // ADD_ROOM,\r\n  CLEAR_MESSAGE_VALUE,\r\n  DELETE_ROOM,\r\n  EDIT_NAME_ROOM,\r\n  GET_CONVERSATIONS_START,\r\n  GET_CONVERSATIONS_SUCCESS,\r\n  GET_CONVERSATIONS_ERROR,\r\n  HANDLE_CHANGE_MESSAGE_VALUE_START,\r\n  HANDLE_CHANGE_MESSAGE_VALUE_SUCCESS,\r\n  HANDLE_CHANGE_MESSAGE_VALUE_ERROR,\r\n  ADD_ROOM_START,\r\n  ADD_ROOM_SUCCESS,\r\n  ADD_ROOM_ERROR,\r\n} from \"./types\";\r\n\r\n// gists: [], //массив наших гистов, то есть данных с сервера\r\n//     gistsPending: false, //состояние загрузки\r\n//     gistsError: null, //состояние ошибки\r\n\r\nconst initialState = {\r\n  conversations: [\r\n    // { id: nanoid(), title: \"room1\", value: \"test value 1\" },\r\n    // { id: nanoid(), title: \"room2\", value: \"test value 2\" },\r\n  ],\r\n  conversationsPending: false,\r\n  conversationsError: null,\r\n};\r\n\r\nexport const conversationsReducer = (state = initialState, action) => {\r\n  //мы посмотрим что action у нас пришел с типом\r\n  switch (action.type) {\r\n    case HANDLE_CHANGE_MESSAGE_VALUE_START:\r\n      return {\r\n        ...state,\r\n        conversationsPending: true,\r\n      };\r\n    case HANDLE_CHANGE_MESSAGE_VALUE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        conversationsPending: false,\r\n        conversations: state.conversations.map((conversation) => {\r\n          return conversation.title === action.payload.roomId\r\n            ? { ...conversation, value: action.payload.value, id: nanoid() }\r\n            : conversation;\r\n        }),\r\n      };\r\n    case HANDLE_CHANGE_MESSAGE_VALUE_ERROR:\r\n      return {\r\n        ...state,\r\n        conversationsPending: false,\r\n        conversationsError: action.payload,\r\n      };\r\n    case CLEAR_MESSAGE_VALUE:\r\n      return {\r\n        ...state,\r\n        conversations: state.conversations.map((conversation) => {\r\n          return conversation.title === action.payload\r\n            ? { ...conversation, value: \"\" }\r\n            : conversation;\r\n        }),\r\n      };\r\n    // case ADD_ROOM:\r\n    //   return {\r\n    //     ...state,\r\n    //     conversations: [\r\n    //       ...state.conversations,\r\n    //       {\r\n    //         id: nanoid(),\r\n    //         title: `room ${state.conversations.length + 1}`,\r\n    //         value: `test value${state.conversations.length + 1}`,\r\n    //       },\r\n    //     ],\r\n    //   };\r\n\r\n    case ADD_ROOM_START:\r\n      return {\r\n        ...state,\r\n        conversationsPending: true,\r\n      };\r\n    case ADD_ROOM_SUCCESS:\r\n      return {\r\n        ...state,\r\n        conversationsPending: false,\r\n        conversations: [\r\n          ...state.conversations,\r\n          {\r\n            id: nanoid(),\r\n            title: `room ${state.conversations.length + 1}`,\r\n            value: `test value${state.conversations.length + 1}`,\r\n          },\r\n        ],\r\n      };\r\n    case ADD_ROOM_ERROR:\r\n      return {\r\n        ...state,\r\n        conversationsPending: false,\r\n        conversationsError: action.payload,\r\n      };\r\n    case DELETE_ROOM:\r\n      return {\r\n        ...state,\r\n        conversations: state.conversations.filter(\r\n          (conversation) => conversation.id !== action.payload,\r\n        ),\r\n      };\r\n    case EDIT_NAME_ROOM:\r\n      return {\r\n        ...state,\r\n        conversations: [...state.conversations].map((conversation) => {\r\n          return conversation.id === action.payload.oldTitleId\r\n            ? { ...conversation, title: action.payload.newTitle }\r\n            : conversation;\r\n        }),\r\n      };\r\n    case GET_CONVERSATIONS_START:\r\n      return {\r\n        ...state,\r\n        conversationsPending: true,\r\n      };\r\n    case GET_CONVERSATIONS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        conversationsPending: false,\r\n        conversations: action.payload,\r\n      };\r\n    case GET_CONVERSATIONS_ERROR:\r\n      return {\r\n        ...state,\r\n        conversationsPending: false,\r\n        conversationsError: action.payload,\r\n      };\r\n    default:\r\n      //по умолчанию если у нас нету такого типа\r\n      return state; //мы вернем state\r\n  }\r\n};\r\n","import {\r\n  HANDLE_CHANGE_MESSAGE_VALUE_START,\r\n  HANDLE_CHANGE_MESSAGE_VALUE_SUCCESS,\r\n  HANDLE_CHANGE_MESSAGE_VALUE_ERROR,\r\n  CLEAR_MESSAGE_VALUE,\r\n  // ADD_ROOM,\r\n  ADD_ROOM_START,\r\n  ADD_ROOM_SUCCESS,\r\n  ADD_ROOM_ERROR,\r\n  DELETE_ROOM,\r\n  EDIT_NAME_ROOM,\r\n  GET_CONVERSATIONS_START,\r\n  GET_CONVERSATIONS_SUCCESS,\r\n  GET_CONVERSATIONS_ERROR,\r\n} from \"./types\";\r\n\r\n// export const handleChangeMessageValue = (value, roomId) => ({\r\n//   type: HANDLE_CHANGE_MESSAGE_VALUE,\r\n//   payload: { value, roomId },\r\n// });\r\nexport const handleChangeMessageValueStart = () => ({\r\n  type: HANDLE_CHANGE_MESSAGE_VALUE_START,\r\n});\r\nexport const handleChangeMessageValueSuccess = (value, roomId) => ({\r\n  type: HANDLE_CHANGE_MESSAGE_VALUE_SUCCESS,\r\n  payload: { value, roomId },\r\n});\r\nexport const handleChangeMessageValueError = (error) => ({\r\n  type: HANDLE_CHANGE_MESSAGE_VALUE_ERROR,\r\n  payload: error,\r\n});\r\nexport const clearMessageValue = (roomId) => ({\r\n  type: CLEAR_MESSAGE_VALUE,\r\n  payload: roomId,\r\n});\r\n// export const addRoom = () => ({\r\n//   type: ADD_ROOM,\r\n// });\r\nexport const addRoomStart = () => ({\r\n  type: ADD_ROOM_START,\r\n});\r\nexport const addRoomSuccess = () => ({\r\n  type: ADD_ROOM_SUCCESS,\r\n});\r\nexport const addRoomError = (error) => ({\r\n  type: ADD_ROOM_ERROR,\r\n  payload: error,\r\n});\r\nexport const deleteRoom = (oldTitleId) => ({\r\n  type: DELETE_ROOM,\r\n  payload: oldTitleId,\r\n});\r\nexport const editNameRoom = (oldTitleId, newTitle) => ({\r\n  type: EDIT_NAME_ROOM,\r\n  payload: { oldTitleId, newTitle },\r\n});\r\n\r\nexport const getConversationsStart = () => ({\r\n  type: GET_CONVERSATIONS_START,\r\n});\r\nexport const getConversationsSuccess = (conversations) => ({\r\n  type: GET_CONVERSATIONS_SUCCESS,\r\n  payload: conversations,\r\n});\r\nexport const getConversationsError = (error) => ({\r\n  type: GET_CONVERSATIONS_ERROR,\r\n  payload: error,\r\n});\r\n","import debounce from \"lodash.debounce\";\r\nimport {\r\n  getConversationsError,\r\n  getConversationsStart,\r\n  getConversationsSuccess,\r\n  handleChangeMessageValueError,\r\n  handleChangeMessageValueStart,\r\n  handleChangeMessageValueSuccess,\r\n  addRoomStart,\r\n  addRoomSuccess,\r\n  addRoomError,\r\n} from \"./actions\";\r\n\r\n//получение списка бесед из бекенда\r\nexport const getConversationsFB =\r\n  () =>\r\n  (dispatch, _, { getConversationsApi }) => {\r\n    dispatch(getConversationsStart()); //вызов старта запроса\r\n    // db.ref(\"conversations\")\r\n    //   .get()\r\n    getConversationsApi()\r\n      .then((snapshot) => {\r\n        const conversations = []; //изначально массив пустой\r\n        snapshot.forEach((snapshot) => {\r\n          conversations.push(snapshot.val()); //в этот массив conversations попадает снимок текущей базы данных\r\n          //мы взяли по снэпшоту циклом прошли и запушили какждый элемент снэпшота к нам в массив\r\n        });\r\n        dispatch(getConversationsSuccess(conversations)); //вызов окончания запроса\r\n      })\r\n      .catch((e) => {\r\n        dispatch(getConversationsError(e)); //вызов ошибки\r\n        console.log(e);\r\n      });\r\n  };\r\n//функция вызова API (debounce позволяет отправлять запрос не на каждое нажатие)\r\nconst cb = debounce(async (handleChangeMessage) => {\r\n  await handleChangeMessage(); //колбек\r\n}, 5000);\r\n// const cb = debounce(async ({ roomId, messageValue }) => {\r\n//   await db.ref(\"conversations\").child(roomId).update({ title: roomId, value: messageValue });\r\n// }, 5000);\r\n//изменение текста сообщения в инпуте (для перехода между мобильной и десктопной версии, например)\r\nexport const handleChangeMessageValueFB =\r\n  (messageValue, roomId) =>\r\n  async (dispatch, _, { handleChangeMessageApi }) => {\r\n    try {\r\n      dispatch(handleChangeMessageValueStart());\r\n      await cb(() => handleChangeMessageApi(messageValue, roomId)); //вызываем колбек-функцию handleChangeMessageApi и только после этого всё остальное\r\n      dispatch(handleChangeMessageValueSuccess(messageValue, roomId));\r\n    } catch (e) {\r\n      dispatch(handleChangeMessageValueError(e));\r\n    }\r\n  };\r\n\r\n//добавление бесед\r\nexport const addConversationsFB =\r\n  () =>\r\n  async (dispatch, _, { addConversationApi }) => {\r\n    try {\r\n      dispatch(addRoomStart()); //вызов старта запроса\r\n      const res = await addConversationApi();\r\n      //   db\r\n      // .ref(\"conversations\")\r\n      // .child(`room ${nanoid()}`)\r\n      // .set({\r\n      //   title: `room ${nanoid()}`,\r\n      //   value: `test value${nanoid()}`,\r\n      // });\r\n      console.log(res);\r\n      dispatch(addRoomSuccess());\r\n    } catch (e) {\r\n      dispatch(addRoomError(e));\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n// db.ref(\"conversations\").child('room1').set({title:\"room1\", value:\"test1\"})\r\n","//здесь описываются все типы\r\n\r\n//отправка сообщений\r\nexport const SEND_MESSAGE_START = \"@messages/send message start\";\r\nexport const SEND_MESSAGE_SUCCESS = \"@messages/send message success\";\r\nexport const SEND_MESSAGE_ERROR = \"@messages/send message error\";\r\n\r\nexport const EDIT_MESSAGE = \"@messages/edit message\";\r\n\r\n//получение сообщений\r\nexport const GET_MESSAGES_START = \"@gists/start get messages from fb\"; //старт запроса\r\nexport const GET_MESSAGES_SUCCESS = \"@gists/success get messages from fb\"; //финиш запроса\r\nexport const GET_MESSAGES_ERROR = \"@gists/error get messages from fb\"; //ошибка запроса","import { nanoid } from \"nanoid\"; //библиотека, которая создает случайный айдишник\r\nimport {\r\n  EDIT_MESSAGE,\r\n  GET_MESSAGES_START,\r\n  GET_MESSAGES_SUCCESS,\r\n  GET_MESSAGES_ERROR,\r\n  SEND_MESSAGE_START, SEND_MESSAGE_SUCCESS, SEND_MESSAGE_ERROR\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  messages: {\r\n    // room1: [\r\n    //   {\r\n    //     id: nanoid(),\r\n    //     author: \"bot\",\r\n    //     message: \"Привет, я бот 1\",\r\n    //     date: new Date().toLocaleTimeString(),\r\n    //   },\r\n    // ],\r\n    // room2: [\r\n    //   {\r\n    //     id: nanoid(),\r\n    //     author: \"bot\",\r\n    //     message: \"Привет, я бот 2\",\r\n    //     date: new Date().toLocaleTimeString(),\r\n    //   },\r\n    // ],\r\n  },\r\n  messagesPending: false,\r\n  messagesError: null\r\n};\r\n\r\nexport const messagesReducer = (state = initialState, action) => {\r\n  //мы посмотрим что action у нас пришел с типом\r\n  switch (action.type) {\r\n    case SEND_MESSAGE_START:\r\n      return {\r\n        ...state,\r\n        messagesPending: true,\r\n      };\r\n    case SEND_MESSAGE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        messagesPending: false,\r\n        messages: {\r\n          ...state.messages,\r\n          [action.payload.roomId]:\r\n          [\r\n            ...(state.messages[action.payload.roomId] || []),\r\n            { ...action.payload.message, date: new Date().toLocaleTimeString(), id: nanoid() },\r\n          ] || [],\r\n        },\r\n      };\r\n    case SEND_MESSAGE_ERROR:\r\n      return {\r\n        ...state,\r\n        messagesPending: false,\r\n        messagesError: action.payload\r\n      };\r\n    case EDIT_MESSAGE:\r\n      return {\r\n        ...state,\r\n        messages: {\r\n          ...state.messages,\r\n          [action.payload.roomId]: [\r\n            ...(state.messages[action.payload.roomId] || []).map((message) => {\r\n              return message.id === action.payload.oldMessageId\r\n                ? { ...message, message: action.payload.newMessage }\r\n                : message;\r\n            }),\r\n          ],\r\n        },\r\n      };\r\n    case GET_MESSAGES_START:\r\n      return {\r\n        ...state,\r\n        messagesPending: true,\r\n      };\r\n    case GET_MESSAGES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        messagesPending: false,\r\n        messages: action.payload\r\n      };\r\n    case GET_MESSAGES_ERROR:\r\n      return {\r\n        ...state,\r\n        messagesPending: false,\r\n        messagesError: action.payload\r\n      };\r\n    default:\r\n      //по умолчанию если у нас нет такого типа\r\n      return state; //мы вернем state\r\n  }\r\n};\r\n","import {SEND_MESSAGE_START,SEND_MESSAGE_SUCCESS,SEND_MESSAGE_ERROR, EDIT_MESSAGE, GET_MESSAGES_START, GET_MESSAGES_SUCCESS, GET_MESSAGES_ERROR} from \"./types\";\r\n\r\n//action creator возвращает объект\r\nexport const sendMessageStart = () => ({\r\n  type: SEND_MESSAGE_START\r\n});\r\nexport const sendMessageSuccess = (message, roomId) => ({\r\n  type: SEND_MESSAGE_SUCCESS,\r\n  payload: { message, roomId },\r\n  meta: { delay: 500 },\r\n});\r\nexport const sendMessageError = (error) => ({\r\n  type: SEND_MESSAGE_ERROR,\r\n  payload: error\r\n});\r\n\r\nexport const editMessage = (oldMessageId, roomId, newMessage) => ({\r\n  type: EDIT_MESSAGE,\r\n  payload: { oldMessageId, roomId, newMessage },\r\n});\r\n\r\nexport const getMessagesStart = () => ({\r\n  type: GET_MESSAGES_START,\r\n});\r\nexport const getMessagesSuccess = (messages) => ({\r\n  type: GET_MESSAGES_SUCCESS,\r\n  payload: messages,\r\n});\r\nexport const getMessagesError = (error) => ({\r\n  type: GET_MESSAGES_ERROR,\r\n  payload: error,\r\n});\r\n","// import { nanoid } from \"nanoid\";\r\n// import { db } from \"../../api/firebase\";\r\nimport { clearMessageValue } from \"../conversations\";\r\nimport {\r\n  getMessagesStart,\r\n  getMessagesSuccess,\r\n  getMessagesError,\r\n  sendMessageStart,\r\n  sendMessageSuccess,\r\n  sendMessageError,\r\n} from \"./actions\";\r\n// import {sendMessagesApi} from \"../../api/messages\";\r\n\r\n//thunk возвращает функцию, которую надо вызвать\r\n//thunk первым арументом принимает всё то же самое, что принимает action, обычная нагрузка,\r\n// а вторым аргументом он принимает всё то, что мы передали в него, это dispatch и getState -\r\n// и третий аргумент exraArgument (Всё, чьл мы пеоежади методом withExtraArgument внутри createStore, опаадет к нам в thunk\r\nexport const sendMessageWithThunk =\r\n  (message, roomId) =>\r\n  async (dispatch, _, { sendMessagesApi }) => {\r\n    try {\r\n      dispatch(sendMessageStart()); //вызов старта запроса\r\n      const res = await sendMessagesApi(roomId, message);\r\n      // db.ref(\"messages\").child(roomId).push({ id: nanoid(), author, message });\r\n      console.log(res);\r\n      dispatch(sendMessageSuccess(message, roomId)); //вызов окончания запроса\r\n      dispatch(clearMessageValue(roomId)); // очистка инпута\r\n    } catch (e) {\r\n      dispatch(sendMessageError(e)); //вызов ошибки\r\n      console.log(\"ОШИБКА\", e.message);\r\n    }\r\n  };\r\n\r\n// dispatch(sendMessage(message, roomId)); //вызывается функция отправки нашего сообщения\r\n\r\n// if (message.author === \"User\") {\r\n//   setTimeout(\r\n//     () => dispatch(sendMessage({ author: \"bot\", message: \"Hello from bot thunk\" }, roomId)), //сообщение бота\r\n//     1000,\r\n//   );\r\n// }\r\n\r\n//getMessagesApi к нам приходит из стора третьим параметром из экстра-аргумента\r\nexport const getMessagesFB =\r\n  () =>\r\n  (dispatch, _, { getMessagesApi }) => {\r\n    // db.ref(\"messages\")\r\n    //   .get()\r\n    getMessagesApi()\r\n      .then((snapshot) => {\r\n        dispatch(getMessagesStart()); //вызов старта запроса\r\n        const messages = {}; //изначально пустой объект\r\n        snapshot.forEach((snap) => {\r\n          console.log(snap);\r\n          messages[snap.key] = Object.values(snap.val()); //в этот объект по ключу попадает снимок текущей базы данных\r\n          //мы взяли по снэпшоту циклом прошли и запушили какждый элемент снэпшота к нам в массив\r\n        });\r\n        console.log(\"messages\", messages);\r\n        dispatch(getMessagesSuccess(messages)); //вызов окончания запроса\r\n      })\r\n      .catch((e) => {\r\n        dispatch(getMessagesError(e)); //вызов ошибки\r\n        console.log(e);\r\n      });\r\n  };\r\n","import classNames from \"classnames\";\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { editMessage } from \"../../../store/messages\";\r\nimport stylesMessages from \"../messageList.module.css\";\r\n\r\nexport function Message({ id, author, message, date }) {\r\n  const dispatch = useDispatch();\r\n  const { roomId } = useParams();\r\n\r\n  const editMessageValue = (id, message) => {\r\n    //id, message - id и текст настоящего сообщения, на которое мы нажмем\r\n    const newValue = prompt(\"Редактировать сообщение:\", message); //новое значение из модалки\r\n    dispatch(editMessage(id, roomId, newValue)); //поменять сообщение на новое значение\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        className={classNames(stylesMessages.blockMessage, {\r\n          [stylesMessages.blockMessageBot]: author === \"bot\",\r\n        })}\r\n      >\r\n        <p className={stylesMessages.iconEdit} onClick={() => editMessageValue(id, message)}>\r\n          <i className=\"fa fa-edit\"></i>\r\n        </p>\r\n\r\n        <p className={stylesMessages.textMessage}>\r\n          <span className={stylesMessages.userName}>{author}</span>: {message}{\" \"}\r\n        </p>\r\n        <p className={stylesMessages.date}>{`${date}`}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { InputAdornment, TextField, withStyles } from \"@material-ui/core\";\r\nimport { Send } from \"@material-ui/icons\";\r\nimport {nanoid} from \"nanoid\";\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\n// import { handleChangeMessageValue } from \"../../store/conversations\";\r\nimport {handleChangeMessageValueFB} from \"../../store/conversations\";\r\nimport { sendMessageWithThunk } from \"../../store/messages\";\r\nimport stylesChats from \"../chat-list/chatList.module.css\";\r\nimport { Message } from \"./message\";\r\nimport stylesMessages from \"./messageList.module.css\";\r\n\r\n\r\n// const user = { text: \"Чат: GB React 26.07\" };\r\n\r\nconst CssTextField = withStyles({\r\n  root: {\r\n    \"& label.Mui-focused\": {\r\n      color: \"black\", //цвет текста\r\n    },\r\n    \"& .MuiInput-underline:after\": {\r\n      borderBottomColor: \"black\",\r\n    },\r\n    \"& .MuiOutlinedInput-root\": {\r\n      \"& fieldset\": {\r\n        borderColor: \"#b2dfee\", //цвет изначальный\r\n        border: \"3 px solid #b2dfee\",\r\n      },\r\n      \"&:hover fieldset\": {\r\n        borderColor: \"#b2dfee\", //цвет при наведении\r\n        backgroundColor: \"#b2dfee\",\r\n        opacity: \"30%\",\r\n      },\r\n      \"&.Mui-focused fieldset\": {\r\n        borderColor: \"#b2dfee\",\r\n      },\r\n    },\r\n  },\r\n})(TextField);\r\n\r\nexport const MessageList = (\r\n    {\r\n  // messages,\r\n  // value,\r\n  // sendMessage,\r\n  // handleChangeValue,\r\n  sendMessageFromBot,\r\n}\r\n) => {\r\n  const { messages, messagesPending, messagesError } = useSelector((state) => state.messages);\r\n  const dispatch = useDispatch();\r\n  const ref = useRef(null);\r\n  const refBlock = useRef(null);\r\n  const { roomId } = useParams();\r\n  const messagesArr = useSelector((state) => state.messages.messages[roomId] || []); //забираем комнаты из store, а если комнаты нет, вернем пустой массив\r\n\r\n  //достаем из глобального состояния value - значение инпута\r\n  const value = useSelector(\r\n    (state) =>\r\n      state.conversations.conversations.find((conversation) => conversation.title === roomId)\r\n        ?.value || \"\",\r\n  );\r\n  console.log(value);\r\n  //заменить useState на провайде!\r\n  // const [m, setMessageList] = useState([]); //добавили поле стейта messageList - В нем будем хранить массив объектов сообщений, начальное значение - пустой массив\r\n  // const [value2, setValue] = useState(\"\"); //добавили поле стейта value - значение поля ввода, начальное значение - пустая строка\r\n  //по клику на кнопку отправить будет выполняться функция\r\n  const handleSendMessage = () => {\r\n    if (value) {\r\n      // dispatch(sendMessage({ author: \"User\", message: value }, roomId));\r\n      dispatch(sendMessageWithThunk({ author: \"User\", message: value }, roomId));\r\n    }\r\n    // setMessageList((state) => [\r\n    //   ...state,\r\n    //   { value, author: \"user\", date: new Date().toLocaleTimeString() },\r\n    // ]); //добавляем в массив объект со свойством value, которое введет пользователь, и свойством author:user. State всегда будет обновляться\r\n    // setValue(\"\"); //обнуляем значение инпута\r\n    // refBlock.current.scrollTop = 300;\r\n    // console.log(refBlock.current);\r\n  };\r\n\r\n  //нам приходит ивент, у ивента есть свойство code\r\n  const handlePressInput = ({ code }) => {\r\n    if (code === \"Enter\") {\r\n      handleSendMessage();\r\n      // setMessageList((state) => [\r\n      //   ...state,\r\n      //   { value, author: \"user\", date: new Date().toLocaleTimeString() },\r\n      // ]);\r\n      // setValue(\"\");\r\n    }\r\n  };\r\n\r\n  //Функция для побочных эффектов\r\n  useEffect(() => {\r\n    // const lastMessage = messages[messages.length - 1]; //найдем последнее сообщение\r\n    const height = 870;\r\n    let timerID;\r\n    ref.current.focus();\r\n    // console.log(refBlock.current.scrollHeight);\r\n\r\n    //Если высота страницы (870) < высоты прокрутки, то прокрутить вниз\r\n    if (height < refBlock.current.scrollHeight) {\r\n      window.scrollTo(0, 9999);\r\n    }\r\n\r\n    // console.log(lastMessage?.author);\r\n    // if (lastMessage?.author === \"User\") {\r\n    //   //если последнее сообщение от юзера\r\n    //   timerID = setTimeout(() => {\r\n    //     sendMessageFromBot({\r\n    //       author: \"bot\",\r\n    //       message: \"Привет, я бот\",\r\n    //       date: new Date().toLocaleTimeString(),\r\n    //     });\r\n    //   }, 1500);\r\n    // }\r\n\r\n    return function () {\r\n      clearTimeout(timerID);\r\n      console.log(\"таймер очищен\");\r\n    };\r\n  }, [messagesArr]); //в зависимости поставим массив сообщений\r\n  // console.log(m, value2);\r\n\r\n  // if (messagesPending){\r\n  //   console.log('ЗАГРУЗКА ОТПРАВКИ')\r\n  // }\r\n  if (messagesError){\r\n    return <h1>ooooopppssss...</h1>\r\n  }\r\n  if (messages){\r\n    console.log(messages)\r\n  }\r\n  //Меняем немного структуру: Вместо Value - message\r\n  return (\r\n    <>\r\n      <div className={stylesMessages.chat} style={{ overflow: scroll }} ref={refBlock}>\r\n        <div className={stylesMessages.message}>\r\n          {messagesArr.map((message, id) => (\r\n            <Message key={id} {...message} date={message.date} />\r\n          ))}\r\n        </div>\r\n\r\n        <CssTextField\r\n          id=\"outlined-basic\"\r\n          inputRef={ref}\r\n          onChange={(event) => dispatch(handleChangeMessageValueFB(event.target.value, roomId))} //изменили функцию\r\n          autoFocus={true} //автофокусировка\r\n          label=\"Введите сообщение\"\r\n          className={stylesMessages.text}\r\n          variant=\"outlined\"\r\n          fullWidth={true}\r\n          value={value}\r\n          onKeyPress={handlePressInput}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment>\r\n                {messagesPending && (<div className={stylesChats.spinner}><div className=\"spinner-border\" role=\"status\"></div></div>)}\r\n\r\n                {value && <Send style={{ cursor: \"pointer\" }} onClick={handleSendMessage} />}\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { deleteRoom, editNameRoom } from \"../../../store/conversations\";\r\nimport stylesChats from \"../chatList.module.css\";\r\n\r\nexport const Chat = ({ id, title, selected }) => {\r\n  const messages = useSelector((state) => {\r\n    return state.messages.messages[title] || [];\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const lastMessage = messages[messages.length - 1];\r\n  return (\r\n    <Link className={stylesChats.listItemLink} to={`/chat/${title}`}>\r\n      <ListItem button={true} selected={selected}>\r\n        <button className={stylesChats.iconEdit} onClick={() => editNameRoom(id, title)}>\r\n          <i className=\"fa fa-edit\"></i>\r\n        </button>\r\n        <button className={stylesChats.iconDelete} onClick={() => dispatch(deleteRoom(id))}>\r\n          <i className=\"fa fa-trash-alt\"></i>\r\n        </button>\r\n        <ListItemText\r\n          className={stylesChats.chatName}\r\n          primary={title} //было chat.name\r\n        />\r\n        {lastMessage && (\r\n          <ListItemText\r\n            className={stylesChats.listItem}\r\n            primary={`${lastMessage.author}:${lastMessage.message}`} //и выводим последнее сообщение в верстку\r\n          />\r\n        )}\r\n      </ListItem>\r\n    </Link>\r\n  );\r\n};\r\n","//здесь будут все наши комнаты в которых мы общаемся\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { addConversationsFB, editNameRoom, deleteRoom } from \"../../store/conversations\";\r\nimport { Chat } from \"./chat\";\r\nimport stylesChats from \"./chatList.module.css\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n  },\r\n}));\r\n\r\nfunction renderRow(props) {\r\n  const { index, style } = props;\r\n  return (\r\n    <ListItem button={true} style={style} key={index}>\r\n      <ListItemText className={stylesChats.listItem} primary={`Чат ${index + 1}`} />\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nrenderRow.propTypes = {\r\n  index: PropTypes.number.isRequired,\r\n  style: PropTypes.object.isRequired,\r\n};\r\n\r\n//к нам приходят сonversations\r\n//пока уберем из пропсов {allMessages, addRoom}\r\nexport const ChatList = () => {\r\n  const { conversations, conversationsPending, conversationsError } = useSelector(\r\n    (state) => state.conversations,\r\n  );\r\n  console.log(\"PENDING\", conversationsPending);\r\n  console.log(\"CONVERSATIONS\", conversations);\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const { roomId } = useParams();\r\n  // const { conversations} = useSelector((state) => state.conversations); //Мы вытаскиваем комнаты из store\r\n  const messages = useSelector((state) => state.messages.messages);\r\n\r\n  const editName = (id, title) => {\r\n    const newName = prompt(\"Редактировать сообщение:\", title); //новое значение из модалки\r\n    dispatch(editNameRoom(id, newName)); //вызывается функция отправки нашего сообщения\r\n  };\r\n\r\n  if (conversationsPending) {\r\n    console.log(\"ЗАГРУЗКА\");\r\n    // return (\r\n    //   <div className={stylesChats.spinner}>\r\n    //     <div className=\"spinner-border\" role=\"status\"></div>\r\n    //   </div>\r\n    // );\r\n  }\r\n  if (conversationsError) {\r\n    console.log(\"ОШИБКА\");\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <List component=\"nav\" aria-label=\"secondary mailbox folder\">\r\n        {conversations.map((chat, index) => {\r\n          //на каждой итерации комнат берем и получаем всю историю ее сообщений\r\n\r\n          const currentMessages = messages[chat.title] || []; //получаем сообщение по названию комнаты; если комнаты нет, то пустой массив\r\n          const lastMessage = currentMessages[currentMessages?.length - 1]; //получаем последнее сообщение\r\n          // console.log(lastMessage);\r\n\r\n          return (\r\n            <Chat key={index} id={chat.id} title={chat.title} selected={roomId === chat.title} />\r\n            // <Link className={stylesChats.listItemLink} key={index} to={`/chat/${chat.title}`}>\r\n            //   <ListItem key={index} button={true} selected={roomId === chat.title}>\r\n            //     <button\r\n            //       className={stylesChats.iconEdit}\r\n            //       onClick={() => editName(chat.id, chat.title)}\r\n            //     >\r\n            //       <i className=\"fa fa-edit\"></i>\r\n            //     </button>\r\n            //     <button\r\n            //       className={stylesChats.iconDelete}\r\n            //       onClick={() => dispatch(deleteRoom(chat.id))}\r\n            //     >\r\n            //       <i className=\"fa fa-trash-alt\"></i>\r\n            //     </button>\r\n            //     <ListItemText\r\n            //       id=\"nameChat\"\r\n            //       className={stylesChats.chatName}\r\n            //       primary={chat.title} //было chat.name\r\n            //     />\r\n            //\r\n            //     {lastMessage && (\r\n            //       <ListItemText\r\n            //         className={stylesChats.listItem}\r\n            //         primary={`${lastMessage.author}:${lastMessage.message}`} //и выводим последнее сообщение в верстку\r\n            //       />\r\n            //     )}\r\n            //   </ListItem>\r\n            // </Link>\r\n          );\r\n        })}\r\n      </List>\r\n      {conversationsPending && (\r\n        <div className={stylesChats.spinner}>\r\n          <div className=\"spinner-border\" role=\"status\"></div>\r\n        </div>\r\n      )}\r\n      <button\r\n        className={stylesChats.btn}\r\n        onClick={() => {\r\n          dispatch(addConversationsFB());\r\n        }}\r\n      >\r\n        Добавить беседу\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import { ThemeProvider } from \"@material-ui/core\";\r\nimport React, { createContext, useCallback, useState } from \"react\";\r\n\r\nexport const ThemeContext = createContext(); //создадим объект Context;\r\n\r\n//теперь когда реакт рендерит компонент, который подписался на изменение этого объекта, реакт получит\r\n// текущее значение из ближайших контекстов\r\n// у ThemeContext есть свойство Provider - позволяет дочерним компонентам подписываться на его изменения\r\n\r\n//функция DefaultThemeProvider возвращает наружу провайдер из контекста\r\nexport const DefaultThemeProvider = ({ children, themes, initialTheme }) => {\r\n  //наружу мы вернему тему и рачаг, которым ее можно менять\r\n  const [theme, setTheme] = useState({\r\n    //тема - это объект с ключами\r\n    theme: themes[initialTheme], // по ключу обращаемся к текущей теме\r\n    name: \"мятная\", //имя текущей темы\r\n  });\r\n\r\n  //изменение темы\r\n  const changeTheme = useCallback(\r\n    (name) => {\r\n      if (themes[name]) {\r\n        //если среди тем есть такая тема (по имени)\r\n        setTheme({ name, theme: themes[name] }); //то меняем эту тему и меняем название\r\n      }\r\n    },\r\n    [themes],\r\n  ); //в зависимости поставим темы\r\n\r\n  //тему и рычаг переключения темы  передаем в пропс провайдера value - тогда она попадет в провайдер, а он передаст дочерним компонентам\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, changeTheme }}>\r\n      <ThemeProvider theme={theme.theme}>{children}</ThemeProvider>\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n","//Layout создается, чтобы переиспользовать\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport stylesChats from \"../chat-list/chatList.module.css\";\r\nimport stylesMessages from \"../message-list/messageList.module.css\";\r\nimport { ThemeContext } from \"../theme-context\";\r\nimport styles from \"./layout.module.css\";\r\n\r\nexport function Layout({ chats, children }) {\r\n  return (\r\n    <>\r\n      <ThemeContext.Consumer>\r\n        {({ theme }) => {\r\n          return (\r\n            <div>\r\n              <Grid container={true} className={styles.app}>\r\n                <Grid\r\n                  item={true}\r\n                  xs={2}\r\n                  className={stylesChats.chatList}\r\n                  style={{ backgroundColor: theme.theme.color }}\r\n                >\r\n                  {chats}\r\n                </Grid>\r\n                <Grid\r\n                  item={true}\r\n                  xs={10}\r\n                  style={{ minWidth: \"50px\" }}\r\n                  className={stylesMessages.messageList}\r\n                >\r\n                  {children}\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n          );\r\n        }}\r\n      </ThemeContext.Consumer>\r\n    </>\r\n  );\r\n}\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { firebaseApp } from \"../../api/firebase\";\r\nimport stylesPage from \"../../pages/page.module.css\";\r\nimport { ThemeContext } from \"../theme-context\";\r\nimport stylesHeader from \"./header.module.css\";\r\n\r\n//функция выхода - по нажатию на кнопку с этой функции у нас идёт запрос на выход\r\n// const signOut  async () => {\r\n//\r\n//   try{\r\n//     setPending(true)\r\n//     const response = await firebaseApp.a1uth().signOut()\r\n//     const result = await response.json()\r\n//     setEmail(result)\r\n//   } catch (e) {\r\n//     setError(e)\r\n//   } finally {\r\n//     setPending(false)\r\n//   }\r\n//   // firebaseApp.a1uth().signOut()\r\n// }\r\n\r\n//Consumer - render props который возвращает нам реакт-элемент. Вернем заголовок\r\n//Consumer первым аргументом принимает то value, которое мы передали в ThemeContext.Provider. value - это текущая тема и ее имя\r\n//передади объект темы theme вместо value\r\nexport function Header({ session }) {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [pending, setPending] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // //функция выхода из профиля = запрос\r\n  const signOut = async () => {\r\n    try {\r\n      setPending(true);//начало загрузки\r\n      await firebaseApp.auth().signOut(); //пока await не выполнится, дальше не идет\r\n      // await setEmail(\"\"); //очистка состояния\r\n      setPending(false);//окончание загрузки\r\n      console.log(\"ЗАГРУЗКА\")\r\n    } catch (e) {\r\n      setError(e.message);//сообщение ошибки\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (session) {\r\n      //если сессия есть\r\n      setEmail(session?.email); //состояние email = свойство email в сессии\r\n      console.log(email);\r\n    }\r\n  }, [email, session]);\r\n\r\n  const { theme, changeTheme } = useContext(ThemeContext);\r\n  const user = useSelector((state) => state.profile.user);\r\n\r\n\r\n  if (error) {\r\n    return <h1>ooooppss...</h1>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/*<ThemeContext.Consumer>*/}\r\n      {/*  {({ theme, changeTheme }) => {*/}\r\n      {/*return (*/}\r\n      <div className={stylesHeader.header} style={{ backgroundColor: theme.theme.color }}>\r\n        <div className={stylesHeader.btn}>\r\n          <button\r\n            className=\"btn btn-secondary dropdown-toggle\"\r\n            href=\"#\"\r\n            role=\"button\"\r\n            id=\"dropdownMenuLink\"\r\n            data-toggle=\"dropdown\"\r\n            aria-expanded=\"false\"\r\n          >\r\n            Цвет темы\r\n          </button>\r\n\r\n          <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\">\r\n            <li>\r\n              <a onClick={() => changeTheme(\"мятная\")} className=\"dropdown-item\" href=\"#\">\r\n                Мятный\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a onClick={() => changeTheme(\"синяя\")} className=\"dropdown-item\" href=\"#\">\r\n                Синий\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a onClick={() => changeTheme(\"черная\")} className=\"dropdown-item\" href=\"#\">\r\n                Черный\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>{\" \"}\r\n        <Link to=\"/gists\" style={{ textDecoration: \"none\", margin: \"auto 8px\" }}>\r\n          <button className={stylesHeader.btnToCab}>Gists</button>\r\n        </Link>\r\n        <Link to=\"/anime\" style={{ textDecoration: \"none\", margin: \"auto 8px\" }}>\r\n          <button className={stylesHeader.btnToCab}>Gists Anime</button>\r\n        </Link>\r\n        <Link to=\"/chat\" style={{ textDecoration: \"none\", margin: \"auto 8px\" }}>\r\n          <button className={stylesHeader.btnToCab}>Chat</button>\r\n        </Link>\r\n        <Link to=\"/login\" style={{ textDecoration: \"none\", margin: \"auto 8px\" }}>\r\n          <button className={stylesHeader.btnToCab}>Логин</button>\r\n        </Link>\r\n        <Link to=\"/sign-up\" style={{ textDecoration: \"none\", margin: \"auto 8px\" }}>\r\n          <button className={stylesHeader.btnToCab}>Регистрация</button>\r\n        </Link>\r\n        {/*<p className={stylesHeader.headerTitle}>CHAT</p>*/}\r\n        <span className={stylesHeader.userName}>\r\n          <p className={stylesHeader.user}>Пользователь:</p> {user.firstName} {user.soName}\r\n        </span>\r\n        <Link to=\"/profile\" style={{ textDecoration: \"none\", margin: \"auto 8px\" }}>\r\n          <button className={stylesHeader.btnToCab}>Войти в личный кабинет</button>\r\n        </Link>\r\n        {/*если есть поле email в сессии, то вывести блок имейла*/}\r\n        {session?.email &&\r\n          (\r\n              pending ? (\r\n                  <a>\r\n                    <button style={{ textDecoration: \"none\", margin: \"auto 8px\", backgroundColor:\"red\", color:\"white\"}} className={stylesHeader.btnToCab} onClick={signOut}>\r\n                      {\" \"}\r\n                      Выход ({session.email})\r\n                    </button>\r\n                  </a>\r\n          ) : (\r\n            <a style={{ textDecoration: \"none\", margin: \"auto 8px\" }}>\r\n              <button className={stylesHeader.btnToCab} onClick={signOut}>\r\n                {\" \"}\r\n                Выход ({session.email})\r\n              </button>\r\n            </a>\r\n          )\r\n          )}\r\n      </div>\r\n      {/*);*/}\r\n      {/*}}*/}\r\n      {/*</ThemeContext.Consumer>*/}\r\n      {/*<p className={stylesHeader.headerTitle}>CHAT</p>*/}\r\n    </>\r\n  );\r\n}\r\n","//здесь описываются все типы\r\n//@counter - это означает, что мы находимся в фиче counter\r\n//чтобы когда мы будем дебаггеры смотреть, чтобы легче было ориентироваться\r\nexport const TOGGLE_NAME_VISIBLE = \"@profile/toggle name visible\";\r\nexport const EDIT_DATA = \"@profile/edit data\";\r\nexport const SAVE = \"@profile/save\";\r\nexport const EDIT_USER = \"@profile/edit user\";\r\n","import { TOGGLE_NAME_VISIBLE, EDIT_DATA, SAVE, EDIT_USER } from \"./types\";\r\n// import {withMobileDialog} from \"@material-ui/core\";\r\n\r\n//2. Создадим тут объект, а у него будет свойство count = 0\r\n//это значение приравниваем к state\r\nconst initialState = {\r\n  nameVisible: false,\r\n  user: {\r\n    firstName: \"Ваня\",\r\n    soName: \"Иванов\",\r\n    age: \"28\",\r\n    birthDay: \"05.01.1993\",\r\n  },\r\n  edit: false, //изначально - редактировать нельзя\r\n};\r\n\r\n//1. создадим редюссер - чистая функция,\r\n// которая вычисляет наше следующее состояние.\r\nexport const profileReducer = (state = initialState, action) => {\r\n  //мы посмотрим что action у нас пришел с типом\r\n  switch (action.type) {\r\n    case TOGGLE_NAME_VISIBLE: //если этот тип TOGGLE_NAME_VISIBLE\r\n      return {\r\n        //мы что-то делаем со стоянием\r\n        ...state,\r\n        nameVisible: !state.nameVisible, //обновляем состояние на противоположное\r\n      };\r\n    case EDIT_DATA:\r\n      return {\r\n        ...state,\r\n        edit: true, //при нажатии на редактирование становится можно редактировать\r\n      };\r\n    case SAVE:\r\n      return {\r\n        ...state,\r\n        edit: false, //при нажатии на сохранение, редактирование больше невозможно\r\n      };\r\n    case EDIT_USER:\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n      };\r\n    default:\r\n      //по умолчанию если у нас нету такого типа\r\n      return state; //мы вернем state\r\n  }\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"; //благодаря этому хуку мы заберем наше состояние\r\nimport { editData, editUser, save } from \"../../store/profile\";\r\nimport styles from \"./profileForm.module.css\";\r\n\r\nexport const useFormInput = function (initialValue) {\r\n  //начальное состояние инпута = initialValue\r\n  const [value, setValue] = useState(initialValue);\r\n  //value - настоящее состояние, изменить можно через setValue\r\n\r\n  //функция клика принимает even t(то что мы ввели)\r\n  const handleChange = function (event) {\r\n    setValue({\r\n      ...value,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  }; //и изменяет настоящее состояние значение на то что мы ввели В конкретном инпуте, найденном по атрибуту name\r\n\r\n  return {\r\n    //возвращаем значение, название и функцию по клику\r\n    value,\r\n    onChange: handleChange, //вот этот слушатель вставим в инпут редактирования параметров\r\n  };\r\n};\r\n\r\nexport const ProfileForm = () => {\r\n  const { firstName, soName, age, birthDay } = useSelector((state) => state.profile.user); //вытаскиваем данные по ключу - например firstName - Выведет Ваня\r\n\r\n  const user = useSelector((state) => state.profile.user); //вытаскиваем данные по ключу стейта user\r\n\r\n  // console.log(user);\r\n\r\n  const form = useFormInput({\r\n    firstName: user.firstName,\r\n    soName: user.soName,\r\n    age: user.age,\r\n    birthDay: user.birthDay,\r\n  });\r\n\r\n  // console.log(form.value);\r\n\r\n  const edit = useSelector((state) => state.profile.edit); //вытаскиваем данные : можно ли редактировать\r\n\r\n  const dispatch = useDispatch(); //чтобы использовать функции\r\n  return (\r\n    <div>\r\n      {/* этот блок в режиме редактирования*/}\r\n      {edit ? (\r\n        <div>\r\n          <label className={styles.label} htmlFor=\"firstName\">\r\n            Имя:\r\n          </label>\r\n          <input\r\n            data-testid=\"firstName\"\r\n            name=\"firstName\"\r\n            className={styles.input}\r\n            id=\"firstName\"\r\n            defaultValue={firstName}\r\n            value={form.value.firstName}\r\n            onChange={form.onChange}\r\n            type=\"text\"\r\n            disabled={false}\r\n          />\r\n          <label className={styles.label} htmlFor=\"soName\">\r\n            Фамилия:\r\n          </label>\r\n          <input\r\n            name=\"soName\"\r\n            className={styles.input}\r\n            id=\"soName\"\r\n            defaultValue={soName}\r\n            type=\"text\"\r\n            disabled={false}\r\n            value={form.value.soName}\r\n            onChange={form.onChange}\r\n          />\r\n\r\n          <label className={styles.label} htmlFor=\"age\">\r\n            Возраст, лет:\r\n          </label>\r\n          <input\r\n            name=\"age\"\r\n            className={styles.input}\r\n            id=\"age\"\r\n            defaultValue={age}\r\n            type=\"text\"\r\n            disabled={false}\r\n            onChange={form.onChange}\r\n            value={form.value.age}\r\n          />\r\n\r\n          <label className={styles.label} htmlFor=\"birthDay\">\r\n            Дата рождения:{\" \"}\r\n          </label>\r\n          <input\r\n            name=\"birthDay\"\r\n            className={styles.input}\r\n            id=\"birthDay\"\r\n            defaultValue={birthDay}\r\n            type=\"text\"\r\n            disabled={false}\r\n            onChange={form.onChange}\r\n            value={form.value.birthDay}\r\n          />\r\n\r\n          <button\r\n            className={styles.btnEditSave}\r\n            type=\"submit\"\r\n            onClick={() => {\r\n              dispatch(editUser(form.value));\r\n              dispatch(save());\r\n              // console.log(state.user);\r\n            }}\r\n          >\r\n            Сохранить\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        /* этот блок в режиме просмотра*/\r\n        <div>\r\n          <label className={styles.label} htmlFor=\"firstName\">\r\n            Имя:{\" \"}\r\n          </label>\r\n          <input\r\n            className={styles.input}\r\n            id=\"firstName\"\r\n            defaultValue={firstName}\r\n            type=\"text\"\r\n            disabled={true}\r\n          />\r\n          <label className={styles.label} htmlFor=\"soName\">\r\n            Фамилия:{\" \"}\r\n          </label>\r\n          <input\r\n            className={styles.input}\r\n            id=\"soName\"\r\n            defaultValue={soName}\r\n            type=\"text\"\r\n            disabled={true}\r\n          />\r\n          <label className={styles.label} htmlFor=\"age\">\r\n            Возраст, лет:{\" \"}\r\n          </label>\r\n          <input className={styles.input} id=\"age\" defaultValue={age} type=\"text\" disabled={true} />\r\n          <label className={styles.label} htmlFor=\"birthDay\">\r\n            Дата рождения:{\" \"}\r\n          </label>\r\n          <input\r\n            className={styles.input}\r\n            id=\"birthDay\"\r\n            defaultValue={birthDay}\r\n            type=\"text\"\r\n            disabled={true}\r\n          />\r\n          <button\r\n            onClick={() => {\r\n              dispatch(editData()); //при нажатии  можно будет редактировать\r\n            }}\r\n            className={styles.btnEditSave}\r\n          >\r\n            Редактировать\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { TOGGLE_NAME_VISIBLE, EDIT_DATA, SAVE, EDIT_USER } from \"./types\";\r\n\r\n//action = { type: string, payload: нагрузка - любое значение}\r\n//action creator\r\n\r\n//эта функция - это action creator.\r\n//объект, который возвращает эта функция - это наш action\r\n\r\nexport const toggleNameVisible = () => ({ type: TOGGLE_NAME_VISIBLE });\r\nexport const editData = () => ({ type: EDIT_DATA });\r\nexport const save = () => ({ type: SAVE });\r\nexport const editUser = (data) => ({ type: EDIT_USER, payload: data });\r\n","//это форма регистрации: мы будем ее использовать в 2х местах: для входа и для регистрации\r\nimport { Input, Button, makeStyles } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst useStyles = makeStyles(() => {\r\n  return {\r\n    input: {\r\n      color: \"#007cad\",\r\n      padding: \"10px 15px\",\r\n      fontSize: \"15px\",\r\n      fontWeight: \"bold\",\r\n      marginBottom: 15,\r\n    },\r\n    root: {\r\n      \"& h1\": {\r\n        fontSize: 25,\r\n        fontWeight: \"bold\",\r\n        marginBottom: 50,\r\n        textAlign: \"center\",\r\n      },\r\n    },\r\n  };\r\n});\r\n\r\nexport function LoginForm({ title, submitButton, onSubmit }) {\r\n  const styles = useStyles();\r\n  const [email, setEmail] = useState(\"\"); //локальное состояние нашей почты, изначально - пустая строка\r\n  const [password, setPassword] = useState(\"\"); //локальное состояние нашего пароля, изначально - пустая строка\r\n  const [error, setError] = useState(\"\");\r\n  const handleSubmit = async () => {\r\n    try {\r\n      await onSubmit(email, password);\r\n    } catch (e) {\r\n      setError(e.message);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      <h1>{title}</h1>\r\n      <Input\r\n        value={email}\r\n        onChange={(e) => setEmail(e.target.value)}\r\n        fullWidth={true}\r\n        placeholder=\"Email\"\r\n        className={styles.input}\r\n      />\r\n      <Input\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n        fullWidth={true}\r\n        placeholder=\"Password\"\r\n        className={styles.input}\r\n        type=\"password\"\r\n      />\r\n      <Button variant=\"text\" fullWidth={true} onClick={handleSubmit}>\r\n        {submitButton}\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","//Это наш template\r\n//Он будет возвращать нашего чилдрена, а ниже он будет возвращать компонент link\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles(() => {\r\n  return {\r\n    link: {\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      marginTop: 30,\r\n      color: \"#000\",\r\n    },\r\n    root: {\r\n      width: 500,\r\n      margin: \"0 auto\",\r\n      marginTop: \"10%\",\r\n    },\r\n  };\r\n});\r\nexport function AuthTemplate({ children, link }) {\r\n  const styles = useStyles(); //создадим хук useStyles\r\n  return (\r\n    <div className={styles.root}>\r\n      {children}\r\n      <div className={styles.link}>{link}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\n//ПРИВАТНЫЙ РОУТ доступен только вошедшим зарегистрированным пользователям\r\nexport function PrivateRoute({ isAut, ...rest }) {\r\n  //если мы зареганы, то вернем компонент Route и передадим остатки пропсов сюда иначе выкидываем в чат\r\n  return isAut ? <Route {...rest} /> : <Redirect to=\"/login\" />;\r\n}\r\n\r\n//ПУБЛИЧНЫЙ РОУТ доступен всем\r\nexport function PublicRoute({ isAut, ...rest }) {\r\n    //если мы НЕ зареганы, то вернем компонент Route и передадим остатки пропсов сюда иначе выкидываем в страницу входа\r\n    return !isAut ? <Route {...rest} /> : <Redirect to=\"/chat\" />;\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Switch, Route, useHistory } from \"react-router-dom\";\r\nimport { Layout, ChatList, MessageList } from \"../components\";\r\nimport { getConversationsFB } from \"../store/conversations\";\r\nimport {getMessagesFB} from \"../store/messages\";\r\nimport stylesPage from \"./page.module.css\";\r\n\r\n\r\nexport function Chat() {\r\n  const { push } = useHistory();\r\n\r\n  useEffect(() => {\r\n    const listenExistChat = ({ code }) => {\r\n      if (code === \"Escape\") {\r\n        push(\"/chat\");\r\n      }\r\n    };\r\n    document.addEventListener(\"keydown\", listenExistChat);\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", listenExistChat);\r\n    };\r\n  }, [push]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getConversationsFB());\r\n    dispatch(getMessagesFB())\r\n  }, [dispatch]);\r\n\r\n  const { conversations, conversationsPending, conversationsError } = useSelector(\r\n    (state) => state.conversations,\r\n  );\r\n  console.log(conversations);\r\n\r\n  const { messages, messagesPending, messagesError } = useSelector(\r\n      (state) => state.messages,\r\n  );\r\n\r\n  if (conversationsPending) {\r\n    console.log(\"загрузка\");\r\n    // return (\r\n    //   <div>\r\n    //     <div className={stylesPage.spinner}>\r\n    //       <div className=\"spinner-border\" role=\"status\"></div>\r\n    //     </div>\r\n    //   </div>\r\n    // );\r\n  }\r\n  if (conversations) {\r\n    console.log(\"загрузка завершена\");\r\n\r\n  }\r\n  if (conversationsError) {\r\n    return (\r\n      <div>\r\n        <h1>oooppss...</h1>\r\n      </div>\r\n    );\r\n  }\r\n  //комнаты динамические, поэтому  мы делаем такую запись. А массивом мы можем передать вот так.\r\n  //то есть мы говорим нашему роуту, что ты должен отработать в том случае, если ты находишься на пути\r\n  // \"/chat/:roomId\" или на пути \"/chat\"\r\n  return (\r\n    <Switch>\r\n      <Route exact={true} path={[\"/chat/:roomId\", \"/chat\"]}>\r\n\r\n        <Layout chats={<ChatList title={conversationsPending} />}>\r\n          <Route path=\"/chat/:roomId\">\r\n            <MessageList title1={messages} title2={messagesPending} title3={messagesError} />\r\n          </Route>\r\n          <Route exact={true} path=\"/chat\">\r\n            <h1 className={stylesPage.title}>Выберите диалог</h1>\r\n            <img\r\n              className={stylesPage.img}\r\n              src={process.env.PUBLIC_URL + \"/logoDialog.png\"}\r\n              width=\"50\"\r\n            />\r\n          </Route>\r\n        </Layout>\r\n      </Route>\r\n      <Route path=\"*\">\r\n        <h1>такого чата нет</h1>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\n//теперь по пути \"/chat/:roomId\" рендерится наш чат\r\n//выходим из всех чатов на путь =\"/chat\" – у нас отрендерился компонент «Выберите сообщение»\r\n","import React from \"react\";\r\nimport { Switch, Route, Link } from \"react-router-dom\";\r\nimport { Chat } from \"./chat\";\r\nimport stylesPage from \"./page.module.css\";\r\n\r\nexport function Welcome() {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/\">\r\n        <div className={stylesPage.pageWelcome}>\r\n          <h1 className={stylesPage.welcomeText}>Привет! Добро пожаловать в чат!</h1>\r\n          <Link to=\"/chat\" style={{ textDecoration: \"none\" }}>\r\n            <button className={stylesPage.welcomeBtn}>Войти в чат</button>\r\n            <img\r\n              className={stylesPage.img}\r\n              src={process.env.PUBLIC_URL + \"/logoDialog.png\"}\r\n              width=\"300\"\r\n            />\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route exact={true} path=\"/chat\">\r\n        <Chat />\r\n      </Route>\r\n      <Route path=\"*\">\r\n        <h1>такого чата нет</h1>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link, Route, Switch } from \"react-router-dom\";\r\nimport stylesPage from \"./page.module.css\";\r\n\r\nexport function Error404() {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"*\">\r\n        <div>\r\n          <img\r\n            className={stylesPage.img}\r\n            src={process.env.PUBLIC_URL + \"/404.jpg\"} //поиск картинки в реакте\r\n            width=\"1024\"\r\n          />\r\n          <Link to=\"/\" style={{ textDecoration: \"none\" }}>\r\n            <button className={stylesPage.welcomeBtn}>\r\n              Вернуться на главную страницу\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ProfileForm } from \"../components/profileForm\";\r\nimport styles from \"../profile.module.css\";\r\nimport { toggleNameVisible } from \"../store/profile\";\r\n\r\nfunction Profile() {\r\n  const nameVisible = useSelector((state) => state.profile.nameVisible); //вытаскиваем данные\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className={styles.pageProfile}>\r\n      <div className={styles.profile}>\r\n        <img\r\n          className={styles.profileLogo}\r\n          src={process.env.PUBLIC_URL + \"/logoDialog.png\"}\r\n          width=\"200\"\r\n        />\r\n        <h1 className={styles.profileTitle}>Личный кабинет</h1>\r\n        <button\r\n          className={styles.profileBtn}\r\n          onClick={() => {\r\n            dispatch(toggleNameVisible());\r\n          }}\r\n        >\r\n          Показать / Скрыть\r\n        </button>\r\n        {nameVisible && <ProfileForm />}\r\n      </div>\r\n      <Link to=\"/chat\" style={{ textDecoration: \"none\" }}>\r\n        <button className={styles.btnToChat}>Вернуться в чат</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\nexport default Profile;\r\n","export const GET_GISTS_START = \"@gists/start query\"; //старт запроса\r\nexport const GET_GISTS_SUCCESS = \"@gists/success query\"; //финиш запроса\r\nexport const GET_GISTS_ERROR = \"@gists/error query\"; //ошибка запроса\r\n\r\nexport const SEARCH_GISTS_START = \"@gists/search start query\"; //старт запроса\r\nexport const SEARCH_GISTS_SUCCESS = \"@gists/search success query\"; //финиш запроса\r\nexport const SEARCH_GISTS_ERROR = \"@gists/search error query\"; //ошибка запроса\r\n","import {\r\n  GET_GISTS_START,\r\n  GET_GISTS_SUCCESS,\r\n  GET_GISTS_ERROR,\r\n  SEARCH_GISTS_START,\r\n  SEARCH_GISTS_SUCCESS,\r\n  SEARCH_GISTS_ERROR,\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  gists: [], //массив наших гистов, то есть данных с сервера\r\n  gistsPending: false, //состояние загрузки\r\n  gistsError: null, //состояние ошибки\r\n};\r\n\r\nexport const gistsReducer = (state = initialState, action) => {\r\n  //мы посмотрим что action у нас пришел с типом\r\n  switch (action.type) {\r\n    case GET_GISTS_START:\r\n    case SEARCH_GISTS_START:\r\n      return {\r\n        ...state,\r\n        gistsPending: true,\r\n      };\r\n    case GET_GISTS_SUCCESS:\r\n    case SEARCH_GISTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        gistsPending: false,\r\n        gists: action.payload,\r\n      };\r\n    case GET_GISTS_ERROR:\r\n    case SEARCH_GISTS_ERROR:\r\n      return {\r\n        ...state,\r\n        gistsError: action.payload,\r\n        gistsPending: false,\r\n      };\r\n    default:\r\n      //по умолчанию если у нас нет такого типа\r\n      return state; //мы вернем state\r\n  }\r\n};\r\n","import {\r\n  GET_GISTS_START,\r\n  GET_GISTS_SUCCESS,\r\n  GET_GISTS_ERROR,\r\n  SEARCH_GISTS_START,\r\n  SEARCH_GISTS_SUCCESS,\r\n  SEARCH_GISTS_ERROR,\r\n} from \"./types\";\r\n\r\nexport const gistsSuccess = (gists) => ({ type: GET_GISTS_SUCCESS, payload: gists });\r\nexport const gistsStart = () => ({ type: GET_GISTS_START });\r\nexport const gistsError = (error) => ({ type: GET_GISTS_ERROR, payload: error });\r\n\r\nexport const searchGistsSuccess = (gists) => ({ type: SEARCH_GISTS_SUCCESS, payload: gists });\r\nexport const searchGistsStart = () => ({ type: SEARCH_GISTS_START });\r\nexport const searchGistsError = (error) => ({ type: SEARCH_GISTS_ERROR, payload: error });\r\n","import {\r\n  gistsStart,\r\n  gistsSuccess,\r\n  gistsError,\r\n  searchGistsStart,\r\n  searchGistsSuccess,\r\n  searchGistsError,\r\n} from \"./actions\";\r\n\r\n//thunk возвращает функцию, которую надо вызвать\r\n//thunk первым арументом принимает всё то же самое, что принимает action, обычная нагрузка,\r\n// а вторым аргументом он принимает всё то, что мы передали в него, это dispatch и getState\r\n\r\n//page=1 по умолчанию\r\n//api - это то, что мы передали третьим параметром - очень удобно для тестирования\r\nexport const getGists = (page = 1) => {\r\n  return async (dispatch, _, api) => {\r\n    try {\r\n      dispatch(gistsStart()); //ВЫЗОВ СТАРТА ЗАПРОСА\r\n      //чтобы получить промис, нам нужно поставить ключевое слово await\r\n      const { data } = await api.getGistsApi(page);\r\n      dispatch(gistsSuccess(data)); //ВЫЗОВ ФИНИША ЗАПРОСА\r\n      console.log(\"data1\", data);\r\n    } catch (e) {\r\n      dispatch(gistsError(e)); //ВЫЗОВ ОШИБКИ, ЕСЛИ ОНА ЕСТЬ\r\n      console.log(e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const searchGistsByUserName = (name, isCurrentQuery) => {\r\n  return async (dispatch, _, api) => {\r\n    try {\r\n      dispatch(searchGistsStart()); //ВЫЗОВ СТАРТА ЗАПРОСА\r\n      //чтобы получить промис, нам нужно поставить ключевое слово await\r\n      const { data } = await api.searchGistsByUserNameApi(name);\r\n      if (isCurrentQuery) {\r\n        dispatch(searchGistsSuccess(data)); //ВЫЗОВ ФИНИША ЗАПРОСА\r\n        console.log(\"data1\", data);\r\n      }\r\n    } catch (e) {\r\n      dispatch(searchGistsError(e)); //ВЫЗОВ ОШИБКИ, ЕСЛИ ОНА ЕСТЬ\r\n      console.log(e);\r\n    }\r\n  };\r\n};\r\n","import debounce from \"lodash.debounce\"\r\nimport React, { useEffect, useMemo, useRef, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { getGists, searchGistsByUserName } from \"../store/gists\"\r\nimport stylesPage from \"./page.module.css\";\r\n\r\n\r\nexport function Gist() {\r\n    const ref = useRef()\r\n    const { gistsPending, gists, gistsError } = useSelector(\r\n        (state) => state.gists,\r\n    )\r\n\r\n    const [search, setSearch] = useState(\"\")//состояние поиска\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    //useMemo гарантирует, что функция дебаунса будет вызываться только 1 раз\r\n    const searchGistDebounced = useMemo(() => {\r\n        return debounce((query) => {\r\n            //объявляем переменную, где мы проверяем, что запрос равен тому запросу, который находится в ref.current.\r\n            const isCurrentQuery = query === ref.current\r\n            //если true то мы обновляем состояние, мы прокидывааем эту переменную внутрь нашего thunk\r\n            dispatch(searchGistsByUserName(query, isCurrentQuery))//вызываем запрос получения гистов по поиску с сервера по ссылке\r\n        }, 1000)\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (!gists.length) {//если массив не пустой\r\n            dispatch(getGists())//вызываем запрос получения гистов по ссылке с сервера\r\n        }\r\n    }, [dispatch, gists])//в зависимость обязательно кидаем данные\r\n\r\n    useEffect(() => {\r\n        if (search) {//если поиск не пуст\r\n            searchGistDebounced(search, dispatch)\r\n        }\r\n\r\n        ref.current = search //в свойство current записываем то, что попадает в поиск\r\n    }, [search, dispatch, searchGistDebounced])//в зависимость обязательно кидаем значение инпута поиска\r\n\r\n    if (gistsError) {\r\n        return (\r\n            <div>\r\n                <h1>oooppss...</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*<button onClick={getGists}>Получить данные</button>*/}\r\n            {Array.from({ length: 10 }).map((_, index) => (\r\n                <button\r\n                    className={stylesPage.btnQuery}\r\n                    key={index}\r\n                    onClick={() => dispatch(getGists(index + 1))}\r\n                >\r\n                    button {index}\r\n                </button>\r\n            ))}\r\n            <hr />\r\n            <div className={stylesPage.gistsBlock} >\r\n                <h1>Search</h1>\r\n                <input value={search} onChange={(e) => setSearch(e.target.value)} />\r\n                <hr />\r\n            </div>\r\n\r\n            {gistsPending ? (\r\n                <div>\r\n                    <div className={stylesPage.spinner}>\r\n                        <div className=\"spinner-border\" role=\"status\"></div>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <div>\r\n\r\n                    <div>\r\n                        {gists.map((gist, index) => (\r\n                            <p className={stylesPage.gistsBlock} key={index}>\r\n                                {gist.description}\r\n                            </p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}","export const GET_GISTS_ANIME_START = \"@gists/start anime query\"; //старт запроса\r\nexport const GET_GISTS_ANIME_SUCCESS = \"@gists/success anime query\"; //финиш запроса\r\nexport const GET_GISTS_ANIME_ERROR = \"@gists/error anime query\"; //ошибка запроса\r\n","import { GET_GISTS_ANIME_START, GET_GISTS_ANIME_SUCCESS, GET_GISTS_ANIME_ERROR } from \"./types\";\r\n\r\nconst initialState = {\r\n  gists: [], //массив наших гистов, то есть данных с сервера\r\n  gistsPending: false, //состояние загрузки\r\n  gistsError: null, //состояние ошибки\r\n};\r\n\r\nexport const gistsAnimeReducer = (state = initialState, action) => {\r\n  //мы посмотрим что action у нас пришел с типом\r\n  switch (action.type) {\r\n    case GET_GISTS_ANIME_START:\r\n      return {\r\n        ...state,\r\n        gistsPending: true,\r\n      };\r\n    case GET_GISTS_ANIME_SUCCESS:\r\n      return {\r\n        ...state,\r\n        gistsPending: false,\r\n        gists: action.payload,\r\n      };\r\n    case GET_GISTS_ANIME_ERROR:\r\n      return {\r\n        ...state,\r\n        gistsError: action.payload,\r\n        gistsPending: false,\r\n      };\r\n    default:\r\n      //по умолчанию если у нас нет такого типа\r\n      return state; //мы вернем state\r\n  }\r\n};\r\n","import { GET_GISTS_ANIME_START, GET_GISTS_ANIME_SUCCESS, GET_GISTS_ANIME_ERROR } from \"./types\";\r\n\r\nexport const gistsAnimeSuccess = (gists) => ({ type: GET_GISTS_ANIME_SUCCESS, payload: gists });\r\nexport const gistsAnimeStart = () => ({ type: GET_GISTS_ANIME_START });\r\nexport const gistsAnimeError = (error) => ({ type: GET_GISTS_ANIME_ERROR, payload: error });\r\n","// import { gistsAnimeStart, gistsAnimeSuccess, gistsAnimeError } from \"./actions\";\r\n//\r\n// //thunk возвращает функцию, которую надо вызвать\r\n// //thunk первым арументом принимает всё то же самое, что принимает action, обычная нагрузка,\r\n// // а вторым аргументом он принимает всё то, что мы передали в него, это dispatch и getState\r\n//\r\n// //page=1 по умолчанию\r\n// //api - это то, что мы передали третьим параметром - очень удобно для тестирования\r\n// export const getGists = (page = 1) => {\r\n//   return async (dispatch, _, api) => {\r\n//     try {\r\n//       dispatch(gistsAnimeStart()); //ВЫЗОВ СТАРТА ЗАПРОСА\r\n//       //чтобы получить промис, нам нужно поставить ключевое слово await\r\n//       const { data } = await api.getGitsAnimeApi(page);\r\n//       dispatch(gistsAnimeSuccess(data)); //ВЫЗОВ ФИНИША ЗАПРОСА\r\n//       console.log(\"data1\", data); //\r\n//     } catch (e) {\r\n//       dispatch(gistsAnimeError(e)); //ВЫЗОВ ОШИБКИ, ЕСЛИ ОНА ЕСТЬ\r\n//       console.log(e);\r\n//     }\r\n//   };\r\n// };\r\n//Здесь мы будем получать данные через  ASYNC AWAIT\r\nimport { gistsAnimeStart, gistsAnimeSuccess, gistsAnimeError } from \"./actions\";\r\n\r\n//thunk возвращает функцию, которую надо вызвать\r\n//thunk первым арументом принимает всё то же самое, что принимает action, обычная нагрузка,\r\n// а вторым аргументом он принимает всё то, что мы передали в него, это dispatch и getState\r\nconst API_URL_PUBLIC = (page) =>\r\n  `https://animechan.vercel.app/api/quotes/anime?title=naruto&page=${page}`;\r\n\r\n//page=1 по умолчанию\r\nexport const getGists =\r\n  (page = 1) =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(gistsAnimeStart()); //ВЫЗОВ СТАРТА ЗАПРОСА\r\n      const response = await fetch(API_URL_PUBLIC(page)); //получаем данные с сервера. Пока данные не загрузятся, дальше не идет\r\n      const result = await response.json(); //декодируем наш ответ в формате json. Пока не выполнится, дальше не идет.\r\n      dispatch(gistsAnimeSuccess(result)); //ВЫЗОВ ФИНИША ЗАПРОСА\r\n    } catch (e) {\r\n      dispatch(gistsAnimeError(e)); //ВЫЗОВ ОШИБКИ, ЕСЛИ ОНА ЕСТЬ\r\n      console.log(e);\r\n    }\r\n  };\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getGists } from \"../store/animegists\";\r\nimport stylesPage from \"./page.module.css\";\r\n\r\nexport function Anime() {\r\n  const { gistsPending, gists, gistsError } = useSelector((state) => state.anime); //Вытаскиваем данные из стейта\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (!gists.length) {\r\n      //если данных нет\r\n      dispatch(getGists()); //вызов запроса\r\n      console.log(gists);\r\n    }\r\n  }, [dispatch, gists]); //в зависимость обязателньо кидаем данные\r\n\r\n  //теперь сделаем условие:\r\n  if (gistsPending) {\r\n    // если pending(загрузка), то вернем pending,\r\n    return (\r\n      <div>\r\n        <div className={stylesPage.spinner}>\r\n          <div className=\"spinner-border\" role=\"status\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  if (gistsError) {\r\n    //если error, то вернем какую-то ошибку,\r\n    return (\r\n      <div>\r\n        <h1>oooppss...</h1>\r\n      </div>\r\n    );\r\n  }\r\n  //иначе если всё ок, то вернем данные\r\n  return (\r\n    <div>\r\n      {/*<button onClick={getGists}>Получить данные</button>*/}\r\n      {Array.from({ length: 10 }).map((_, index) => (\r\n        <button\r\n          className={stylesPage.btnQuery}\r\n          key={index}\r\n          onClick={() => dispatch(getGists(index + 1))}\r\n        >\r\n          button {index}\r\n        </button>\r\n      ))}\r\n      <div>\r\n        {gists.map((gist, index) => (\r\n          <p className={stylesPage.gistsBlock} key={index}>\r\n            {gist.character}\r\n          </p>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","//страница логина\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {firebaseApp} from \"../api/firebase\";\r\nimport { LoginForm, AuthTemplate } from \"../components\";\r\n//оборачиваем в шаблон нашу форму логина,\r\n// передаем link (ссылку на страницу регистрации) и children(саму форму)\r\nimport { Header } from \"../components/header/header\";\r\n\r\n//функция входа по имейлу и паролю и вызываем ее в рендере\r\nconst onSubmit = (email,password) => {\r\n    return firebaseApp.auth().signInWithEmailAndPassword(email,password)\r\n}\r\n\r\nexport function Login() {\r\n  return (\r\n    <div>\r\n      <AuthTemplate link={<Link to=\"sign-up\">У вас нет аккаунта? Зарегистрируйтесь</Link>}>\r\n        <LoginForm title=\"Авторизация\" submitButton=\"Войти\" onSubmit={onSubmit}/>\r\n      </AuthTemplate>\r\n    </div>\r\n  )\r\n}\r\n","//страница регистрации\r\nimport React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {firebaseApp} from \"../api/firebase\";\r\nimport {AuthTemplate,LoginForm} from \"../components\";\r\n\r\n\r\n//функция регистрации по имейлу и паролю и вызываем ее в рендере\r\nconst onSubmit = (email,password) => {\r\n    console.log(email, password)\r\n    return firebaseApp.auth().createUserWithEmailAndPassword(email,password)\r\n}\r\n\r\nexport function SignUp() {\r\n    return (\r\n        <div>\r\n            <AuthTemplate link={<Link to=\"login\">У вас есть аккаунт? Войдите</Link>}>\r\n                <LoginForm title=\"Регистрация\" submitButton=\"Зарегистрироваться\" onSubmit={onSubmit}/>\r\n            </AuthTemplate>\r\n        </div>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\nimport { withLogger } from \"./logger\";\r\n//Все запросы будут идти не через fetch , а через этот класс\r\n//у axios есть метод create - он принимает базовый URL\r\nclass Request {\r\n  constructor(token) {\r\n    this.request = withLogger(\r\n      axios.create({\r\n        baseURL: \"https://api.github.com\", //базовый URL - отправная точка наших запросов\r\n      }),\r\n    );\r\n    this.token = token; //это ключ, по которому бекенд определяет, какой юзер сделал запрос\r\n  }\r\n  //повторяющуюся логику мы вынесли в отдельную функцию\r\n  requestWithToken = () => {\r\n    return {\r\n      headers: { \"x-token\": this.token },\r\n    };\r\n  };\r\n\r\n  //объявим метод get который принимает нашу URL и какие-то параметры: например withAuth - это boolean\r\n  get = (url, withAuth) => {\r\n    let config = {}; //создадим какой-то конфиг\r\n    if (withAuth) {\r\n      //если withAuth true , то наш запрос будет с токеном: в конфиг добавим заголовки - все заголовки на бэк мы передаем в этом месте.\r\n      config = { ...config, ...this.requestWithToken() }; //вместо того, чтобы в каждом thunk писать такой конфиг, мы его пишем 1 раз в классе Request\r\n    }\r\n    return this.request.get(url, config);\r\n  };\r\n\r\n  //объявим метод зщые который принимает нашу URL, какие-то параметры, и withAuth - это boolean\r\n  post = (url, params, withAuth) => {\r\n    let config = {}; //создадим какой-то конфиг\r\n    if (withAuth) {\r\n      //если withAuth true , то наш запрос будет с токеном: в конфиг добавим заголовки - все заголовки на бэк мы передаем в этом месте.\r\n      config = { ...config, ...this.requestWithToken() }; //вместо того, чтобы в каждом thunk писать такой конфиг, мы его пишем 1 раз в классе Request\r\n    }\r\n    return this.request.post(url, params, config);\r\n  };\r\n}\r\n\r\nexport const request = new Request(\"test token\"); //наружу мы вернем request с токеном \"test token\"\r\n//Именно этот request мы будем использовать вместо нашего fetch в store/gists/thunks.js\r\n","import axios from \"axios\";\r\n\r\nexport const withLogger = (axios) => {\r\n  axios.interceptors.request.use((request) => {\r\n    console.log(`%c AXIOS [request] ${request.url}:`, \"color: green; font-weight: bold\", request);\r\n    return request;\r\n  });\r\n\r\n  axios.interceptors.response.use(\r\n    (config) => {\r\n      console.log(\r\n        `%c AXIOS [response-success] ${config.config.url}:`,\r\n        \"color: #b2dfee; font-weight: bold\",\r\n        config,\r\n      );\r\n      return config;\r\n    },\r\n    (error) => {\r\n      console.log(`%c AXIOS [response-error]`, \"color: red; font-weight: bold\", error);\r\n    },\r\n  );\r\n\r\n  return axios;\r\n};\r\n","import { applyMiddleware, combineReducers, createStore, compose } from \"redux\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport thunk from \"redux-thunk\";\r\nimport {\r\n  getConversationsApi,\r\n  handleChangeMessageApi,\r\n  addConversationApi,\r\n} from \"../api/conversations\";\r\nimport { getGistsApi, searchGistsByUserNameApi } from \"../api/gists\";\r\nimport { getMessagesApi, sendMessagesApi } from \"../api/messages\"; //импортируем api получения сообщений и api отправления сообщений и добавим их в стор\r\nimport { gistsAnimeReducer } from \"./animegists\";\r\nimport { conversationsReducer } from \"./conversations\"; //импортируем profileReducer\r\nimport { gistsReducer } from \"./gists\";\r\nimport { messagesReducer } from \"./messages\";\r\nimport { logger, botSendMessage, timeoutScheduler, report } from \"./middlewares\";\r\nimport { profileReducer } from \"./profile\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  blacklist: [\"conversations\", \"messages\"], //те редюссеры, которые НЕ будут сохранены\r\n  whitelist: [\"profile\"], //те редюссеры, которые будут сохранены\r\n};\r\n\r\n//сделаем новую переменную\r\nexport const reducer = combineReducers({\r\n  profile: profileReducer,\r\n  conversations: conversationsReducer,\r\n  messages: messagesReducer,\r\n  gists: gistsReducer,\r\n  anime: gistsAnimeReducer,\r\n});\r\n\r\n//все наши редюссеры должны проходить через persistReducer, чтобы сохраняться\r\nconst persistreducer = persistReducer(persistConfig, reducer);\r\n\r\nexport const store = createStore(\r\n  persistreducer,\r\n  compose(\r\n    applyMiddleware(\r\n      report,\r\n      thunk.withExtraArgument({\r\n        getGistsApi,\r\n        searchGistsByUserNameApi,\r\n        getMessagesApi,\r\n        sendMessagesApi,\r\n        getConversationsApi,\r\n        handleChangeMessageApi,\r\n        addConversationApi,\r\n      }), //всё, что передаем в этот метод, попадет третьим параметром в thunk\r\n      logger,\r\n      botSendMessage,\r\n      timeoutScheduler,\r\n    ),\r\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f,\r\n  ),\r\n); //создали наше хранилище и передаем в него counterReducer\r\n\r\nexport const persistore = persistStore(store); // передаем персистору наш текущий стор\r\n","//обработка ошибок\r\nexport const report = () => (next) => (action) => {\r\n  console.log(\"report\");\r\n  try {\r\n    return next(action);\r\n  } catch (e) {\r\n    console.error(\"Some error: \", e);\r\n  }\r\n};\r\n","import { request } from \"./request\";\r\n\r\nexport const getGistsApi = (page) => request.get(`/gists/public?page=${page}`); //аксиос по-другому возвращает данные, нежели fetch - для аксиоса не нужно выполнять response.json\r\n\r\nexport const searchGistsByUserNameApi = (user) => request.get(`/users/${user}/gists`);\r\n","//Сюда мы будем импортировать нашу БД по сообщениям\r\nimport { nanoid } from \"nanoid\";\r\nimport { db } from \"./firebase\";\r\n//получение сообщений\r\nexport const getMessagesApi = () => db.ref(\"messages\").get();\r\n//отправка сообщений\r\nexport const sendMessagesApi =\r\n  () =>\r\n  (roomId, { author, message }) =>\r\n    db.ref(\"messages\").child(roomId).push({ id: nanoid(), author, message });\r\n","//Сюда мы будем импортировать нашу БД по комнатам\r\nimport { nanoid } from \"nanoid\";\r\nimport { db } from \"./firebase\";\r\n\r\n//получение наших комнат\r\nexport const getConversationsApi = () => db.ref(\"conversations\").get();\r\n\r\n//изменение текста сообщения в инпуте (для перехода между мобильной и десктопной версии, например)\r\nexport const handleChangeMessageApi = (messageValue, roomId) =>\r\n  db.ref(\"conversations\").child(roomId).update({ title: roomId, value: messageValue });\r\n\r\n//добавление диалогов\r\nexport const addConversationApi = () =>\r\n  db\r\n    .ref(\"conversations\")\r\n    .child(`room ${nanoid()}`)\r\n    .set({\r\n      id: nanoid(),\r\n      title: `room ${nanoid()}`,\r\n      value: `test value${nanoid()}`,\r\n    });\r\n","import { store } from \"../index\";\r\n\r\nexport const logger = () => (next) => (action) => {\r\n  console.log(\"dispatching\", action); //смотрим наше действие: type и payload\r\n  console.log(\"prev state\", store.getState()); //предыдущее состояние\r\n  const result = next(action); //создадим переменную, в которую запишем ответ функции next и передадим наше действие дальше\r\n  console.log(\"next state\", store.getState()); //следующее состояние\r\n  return result; //вернем результат\r\n};\r\n","import { sendMessageSuccess } from \"../messages\";\r\nimport { SEND_MESSAGE_SUCCESS } from \"../messages/types\";\r\n\r\nexport const botSendMessage = (store) => (next) => (action) => {\r\n  if (action.type === SEND_MESSAGE_SUCCESS && action.payload.message.author === \"User\") {\r\n    setTimeout(() => {\r\n      store.dispatch(\r\n        sendMessageSuccess(\r\n          {\r\n            author: \"bot\",\r\n            message: \"Hello from bot middleware\",\r\n            date: new Date().toLocaleTimeString(),\r\n          },\r\n          action.payload.roomId,\r\n        ),\r\n      );\r\n    }, 500);\r\n  }\r\n  return next(action);\r\n};\r\n","export const timeoutScheduler = () => (next) => (action) => {\r\n  const delay = action?.meta?.delay; //свойство задержки\r\n  if (!delay) {\r\n    //если этого свойства нет\r\n    return next(action); //то вызовем нашу функцию next и передадим туда action\r\n  }\r\n  //а если это свойство есть вызываем запустим нашу функцию next с каким-то таймаутом, указанным в свойстве delay\r\n  const timeoutId = setTimeout(() => next(action), delay);\r\n  return function clear() {\r\n    clearInterval(timeoutId);\r\n  };\r\n};\r\n","import { createTheme } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\"; //импортируем провайдер\r\n\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n// import { App } from \"./App\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport { firebaseApp } from \"./api/firebase\";\r\nimport { PrivateRoute, PublicRoute } from \"./components\";\r\nimport { Header } from \"./components/header/header\";\r\nimport { DefaultThemeProvider } from \"./components/theme-context\";\r\nimport { Chat, Welcome, Error404, Gist, Anime, SignUp, Login } from \"./pages\";\r\nimport Profile from \"./pages/profile\";\r\nimport { persistore, store } from \"./store\";\r\n\r\n// создаем тему material\r\n// const theme = createTheme({\r\n//   синяя: {\r\n//     color: \"blue\",\r\n//   },\r\n//   черная: {\r\n//     color: \"black\",\r\n//   },\r\n// });\r\n\r\n//наш вариант тем\r\nconst themes = {\r\n  мятная: createTheme({\r\n    color: \"#b2dfee\",\r\n  }),\r\n  синяя: createTheme({\r\n    color: \"#007cad\",\r\n  }),\r\n  черная: createTheme({\r\n    color: \"black\",\r\n  }),\r\n};\r\n\r\n// //Создаем комнату1 и комнату2\r\n// const addConversation = () => {\r\n//   //обращаемся к необходимой коллекции, далее к ребенку коллекции и устанавливаем ей название room1, value \"\"\r\n//   db.ref(\"conversations\").child(\"room2\").set({ title: \"room2\", value: \"test2\" });\r\n// };\r\n//\r\n// //Создаем сообщения\r\n// const createMessage = (roomId) => {\r\n//   //обращаемся к необходимой коллекции, далее к ребенку коллекции и устанавливаем ей название room1, value \"\"\r\n//   db.ref(\"messages\").child(\"room2\").push({ id: 1, author: \"User\", message: \"some text2\" });\r\n// };\r\n\r\n//вынесем в отдельную функцию:\r\n// роуты можно писать так: component={() => <Chat />}\r\n// или так: component={Chat}\r\nconst App = () => {\r\n  const [session, setSession] = useState(null); //состояние наших сессий\r\n  //когда изменится состояние нашего юзера, вызовется метод подписки\r\n  useEffect(() => {\r\n    firebaseApp.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        //если юзер есть\r\n        setSession(user); //состояние изменится на user\r\n      } else {\r\n        //если юзера нет\r\n        setSession(null); //вернуть null\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <React.StrictMode>\r\n        <PersistGate loading={null} persistor={persistore}>\r\n          <BrowserRouter basename='/calendar'>\r\n            <DefaultThemeProvider themes={themes} initialTheme={\"мятная\"}>\r\n              {/*<button onClick={addConversation}>Добавить комнату</button>*/}\r\n              {/*<button onClick={createMessage}>Добавить сообщение в комнату</button>*/}\r\n              <Header session={session} />\r\n              <Switch>\r\n                <PrivateRoute exact={true} isAut={session} path=\"/chat\" component={Chat} />\r\n                <PrivateRoute exact={true} isAut={session} path=\"/chat/:roomId\" component={Chat} />\r\n                <Route exact={true} isAut={session} path=\"/\" component={Welcome} />\r\n                <PrivateRoute exact={true} isAut={session} path=\"/profile\" component={Profile} />\r\n                <PrivateRoute exact={true} isAut={session} path=\"/gists\" component={Gist} />\r\n                <PrivateRoute exact={true} isAut={session} path=\"/anime\" component={Anime} />\r\n                <PublicRoute exact={true} isAut={session} path=\"/login\" component={Login} />\r\n                <PublicRoute exact={true} isAut={session} path=\"/sign-up\" component={SignUp} />\r\n                <Route path=\"*\" component={Error404} />\r\n              </Switch>\r\n            </DefaultThemeProvider>\r\n          </BrowserRouter>\r\n        </PersistGate>\r\n      </React.StrictMode>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"page_title__Ds8Lg\",\"img\":\"page_img__12bgB\",\"main\":\"page_main__1RiuD\",\"error404\":\"page_error404__2_l6W\",\"pageWelcome\":\"page_pageWelcome__3dqS4\",\"welcomeText\":\"page_welcomeText__3VhpQ\",\"welcomeBtn\":\"page_welcomeBtn__2JxqC\",\"btnQuery\":\"page_btnQuery__1HyXX\",\"hr\":\"page_hr__1JJzQ\",\"gistsBlock\":\"page_gistsBlock__1ocBx\",\"spinner\":\"page_spinner__2U7NW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"profileForm_input__1Qd8D\",\"label\":\"profileForm_label__1idKA\",\"btnEditSave\":\"profileForm_btnEditSave__-jKPj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatList\":\"chatList_chatList__3hqp1\",\"title\":\"chatList_title__X7XY5\",\"listItem\":\"chatList_listItem__1dCRo\",\"buttonAdd\":\"chatList_buttonAdd__1_0YQ\",\"listItemLink\":\"chatList_listItemLink__1lqVk\",\"chatName\":\"chatList_chatName__2GlJ_\",\"chatList_listItem__1mE9X\":\"chatList_chatList_listItem__1mE9X__H7Ms0\",\"btn\":\"chatList_btn__en_74\",\"iconDelete\":\"chatList_iconDelete__1uPOq\",\"iconEdit\":\"chatList_iconEdit__r_-PI\",\"spinner\":\"chatList_spinner__1y5ZJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageList\":\"messageList_messageList__1h0wR\",\"title\":\"messageList_title__J7oiP\",\"text\":\"messageList_text__3v8j7\",\"blockMessage\":\"messageList_blockMessage__VRMT_\",\"blockMessageBot\":\"messageList_blockMessageBot__30BsU\",\"chat\":\"messageList_chat__3Bbpf\",\"message\":\"messageList_message__3M_Xe\",\"userName\":\"messageList_userName__2eDA-\",\"date\":\"messageList_date__1C4cV\",\"textMessage\":\"messageList_textMessage__lv3QR\",\"iconEdit\":\"messageList_iconEdit__i7gxN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__a9rao\",\"headerTitle\":\"header_headerTitle__1v3fG\",\"btn\":\"header_btn__2GINy\",\"btnToCab\":\"header_btnToCab__2OJYf\",\"user\":\"header_user__1YA2F\",\"userName\":\"header_userName__32PQA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageProfile\":\"profile_pageProfile__WGROu\",\"profile\":\"profile_profile__1aegY\",\"profileTitle\":\"profile_profileTitle__S_erQ\",\"profileBtn\":\"profile_profileBtn__30kcn\",\"profileLogo\":\"profile_profileLogo__2sLzj\",\"btnToChat\":\"profile_btnToChat__3oL_w\",\"btnEditSave\":\"profile_btnEditSave__1VJ3C\",\"input\":\"profile_input__Z4KDL\"};"],"sourceRoot":""}